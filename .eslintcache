[{"/home/akashmanna/proj/online-proctoring-js/react-deploy/src/reportWebVitals.js":"1","/home/akashmanna/proj/online-proctoring-js/react-deploy/src/index.js":"2","/home/akashmanna/proj/online-proctoring-js/react-deploy/src/App.js":"3"},{"size":362,"mtime":1609581785270,"results":"4","hashOfConfig":"5"},{"size":500,"mtime":1609581785270,"results":"6","hashOfConfig":"5"},{"size":3749,"mtime":1609581785270,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sjzr7c",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/home/akashmanna/proj/online-proctoring-js/react-deploy/src/reportWebVitals.js",[],"/home/akashmanna/proj/online-proctoring-js/react-deploy/src/index.js",[],"/home/akashmanna/proj/online-proctoring-js/react-deploy/src/App.js",["15","16","17"],"import React, { useRef, useEffect, useState  } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\n\n\nclass App extends React.Component {\n  // reference to both the video and canvas\n  videoRef = React.createRef();\n  canvasRef = React.createRef();\n\n  // we are gonna use inline style\n  styles = {\n    position: 'fixed',\n    top: 150,\n    left: 150,\n  };\n\n\n  detectFromVideoFrame = (model, video) => {\n    model.detect(video).then(predictions => {\n      this.showDetections(predictions);\n\n      requestAnimationFrame(() => {\n        this.detectFromVideoFrame(model, video);\n      });\n    }, (error) => {\n      console.log(\"Couldn't start the webcam\")\n      console.error(error)\n    });\n  };\n\n  showDetections = predictions => {\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const font = \"24px helvetica\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n      // Draw the bounding box.\n      ctx.strokeStyle = \"#2fff00\";\n      ctx.lineWidth = 1;\n      ctx.strokeRect(x, y, width, height);\n      // Draw the label background.\n      ctx.fillStyle = \"#2fff00\";\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(font, 10);\n      // draw top left rectangle\n      ctx.fillRect(x, y, textWidth + 10, textHeight + 10);\n      // draw bottom left rectangle\n      ctx.fillRect(x, y + height - textHeight, textWidth + 15, textHeight + 10);\n\n      // Draw the text last to ensure it's on top.\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(prediction.class, x, y);\n      ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\n    });\n  };\n\n  componentDidMount() {\n    if (navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia) {\n      // define a Promise that'll be used to load the webcam and read its frames\n      const webcamPromise = navigator.mediaDevices\n        .getUserMedia({\n          video: true,\n          audio: false,\n        })\n        .then(stream => {\n          // pass the current frame to the window.stream\n          window.stream = stream;\n          // pass the stream to the videoRef\n          this.videoRef.current.srcObject = stream;\n\n          return new Promise(resolve => {\n            this.videoRef.current.onloadedmetadata = () => {\n              resolve();\n            };\n          });\n        }, (error) => {\n          console.log(\"Couldn't start the webcam\")\n          console.error(error)\n        });\n\n      // define a Promise that'll be used to load the model\n      const loadlModelPromise = cocoSsd.load();\n      \n      // resolve all the Promises\n      Promise.all([loadlModelPromise, webcamPromise])\n        .then(values => {\n          this.detectFromVideoFrame(values[0], this.videoRef.current);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }\n\n  // here we are returning the video frame and canvas to draw,\n  // so we are in someway drawing our video \"on the go\"\n  render() {\n    return (\n      <div> \n        <video\n          style={this.styles}\n          autoPlay\n          muted\n          playsInline\n          ref={this.videoRef}\n          width=\"720\"\n          height=\"600\"\n        />\n        <canvas style={this.styles} ref={this.canvasRef} width=\"720\" height=\"650\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\nconst domContainer = document.querySelector('#root');\nReactDOM.render(React.createElement(App), domContainer);\n",{"ruleId":"18","severity":1,"message":"19","line":1,"column":17,"nodeType":"20","messageId":"21","endLine":1,"endColumn":23},{"ruleId":"18","severity":1,"message":"22","line":1,"column":25,"nodeType":"20","messageId":"21","endLine":1,"endColumn":34},{"ruleId":"18","severity":1,"message":"23","line":1,"column":36,"nodeType":"20","messageId":"21","endLine":1,"endColumn":44},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used."]